@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions;
@using ConwayClient.Models;
@using System.Diagnostics;

@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col s12 center-align">
        <BECanvas Width="@CanvasWidth" Height="@CanvasHeight" @ref="_canvasReference"></BECanvas>
    </div>
</div>

@code {
    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;
    private GameBoard _gameBoard;
    private DotNetObjectReference<GameOfLife> _objectReference;
    private Timer _gameTimer;

    private const int CanvasWidth = 960;
    private const int CanvasHeight = 540;

    public bool IsGameRunning => _gameBoard.IsRunning;

    [Parameter] public int Rows { get; set; } = 9;
    [Parameter] public int Columns { get; set; } = 16;
    [Parameter] public EventCallback<bool> OnGameStateChanged { get; set; }

    private int CellWidth => CanvasWidth / Columns;
    private int CellHeight => CanvasHeight / Rows;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);

            // Initialize the continuous rendering loop
            await JSRuntime.InvokeVoidAsync("requestAnimationLoop", _objectReference);

            // Add canvas click listener
            await JSRuntime.InvokeVoidAsync("addCanvasClickListener", _objectReference);

            _gameBoard = new GameBoard(Rows, Columns);
            _context = await _canvasReference.CreateCanvas2DAsync();
        }
    }

    private async Task DrawGameBoard()
    {
        if (_gameBoard == null) return;
        var watch = Stopwatch.StartNew();

        var tasks = new List<Task>();

        for (int row = 0; row < _gameBoard.Rows; row++)
        {
            for (int col = 0; col < _gameBoard.Columns; col++)
            {
                Cell cell = _gameBoard.Cells[row, col];
                string fillColor = cell.IsAlive ? "#ff8f00" : "#b0bec5";

                tasks.Add(_context.SetFillStyleAsync(fillColor));
                tasks.Add(_context.FillRectAsync(col * CellWidth, row * CellHeight, CellWidth, CellHeight));
                tasks.Add(_context.SetStrokeStyleAsync("white"));
                tasks.Add(_context.StrokeRectAsync(col * CellWidth, row * CellHeight, CellWidth, CellHeight));
            }
        }

        await Task.WhenAll(tasks);

        watch.Stop();
        var frameTime = watch.Elapsed.TotalSeconds;  // time taken to render the frame
        var fps = frameTime > 0 ? 1.0 / frameTime : 0;  // calculate FPS

        // Display the FPS
        await _context.SetFontAsync("16px sans-serif");
        await _context.SetFillStyleAsync("black");
        await _context.FillTextAsync($"FPS: {fps:F2}", CanvasWidth - 80, 20);
    }

    [JSInvokable]
    public async Task Render()
    {
        await DrawGameBoard();
    }

    public async Task StartGame()
    {
        if (_gameBoard.IsRunning) return;
        _gameBoard.StartGame();
        _gameTimer = new Timer( _ =>
        {
            var nextState = _gameBoard.GenerateNextState(); // Generate the next game state
            _gameBoard.UpdateGameState(nextState); // Update the game state with the next state
        }, null, 0, 500);  // Adjust the interval as needed

        await OnGameStateChanged.InvokeAsync(_gameBoard.IsRunning);
    }

    public async Task PauseGame()
    {
        if (!_gameBoard.IsRunning) return;

        _gameTimer?.Dispose();
        _gameTimer = null;
        _gameBoard.PauseGame();

        await OnGameStateChanged.InvokeAsync(_gameBoard.IsRunning);
    }

    public void ToggleCellState(int row, int col)
    {
        // Create a copy of the current state
        var toggledState = (Cell[,])_gameBoard.Cells.Clone();

        // Toggle the cell's state in the copied state
        toggledState[row, col].IsAlive = !toggledState[row, col].IsAlive;

        // Update the game state with the toggled state
        _gameBoard.UpdateGameState(toggledState);
    }

    [JSInvokable]
    public void CanvasClicked(double x, double y)
    {
        int col = (int)x / CellWidth;
        int row = (int)y / CellHeight;

        if (row >= 0 && row < Rows && col >= 0 && col < Columns)
        {
            ToggleCellState(row, col);
        }
    }

    public void ResetGame()
    {
        _gameBoard.ResetGame();
    }

    public void RandomizeBoard()
    {
        _gameBoard.RandomizeBoard();
    }

    public void Dispose()
    {
        _gameTimer?.Dispose();
        _objectReference?.Dispose();
    }
}