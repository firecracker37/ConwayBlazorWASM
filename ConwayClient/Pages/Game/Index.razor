@page "/"
@layout Layout
@inject IJSRuntime JSRuntime
@inject ISaveService SaveService
@using System.Threading
@using ConwayClient.Models
@using ConwayClient.Services
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@using Blazor.Extensions

<div class="game-container" style="width: 100%; max-width: 100%;">
    <div class="canvas-container" style="width: @CanvasWidth; height: @CanvasHeight;" @onwheel="HandleWheel" @onmousedown="HandleMouseDown" @onmousemove="HandleMouseMove" @onmouseup="HandleMouseUp" @onmouseleave="HandleMouseUp">
        <ConwayControlUi CanvasSize="@CanvasWidth"
                         ShowUI="@_showUI"
                         OnUIVisibilityChanged="ToggleUIVisibility"
                         IsGameRunning="@_isGameRunning"
                         ShowGridLines="@_showGridLines"
                         ToggleGameState="HandleGameToggle"
                         ToggleGridLines="HandleGridToggle"
                         OnPreviousState="HandlePreviousState"
                         OnNextState="HandleNextState"
                         OnReset="HandleReset"
                         OnRandomize="HandleRandomize"
                         OnExportState="HandleExportState"
                         OnImportState="HandleImportState"
                         @bind-DeadCellColor="@DeadCellColor" 
                         @bind-AliveCellColor="@AliveCellColor"
                         @bind-GridLineColor="@GridLineColor">
            <BECanvas Width="@canvasSize" Height="@canvasSize" @ref="_canvasReference"></BECanvas>
            <div style="display: none">
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_bufferCanvasReference"></BECanvas>
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_gridCanvasReference"></BECanvas>
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_cellCanvasReference"></BECanvas>
            </div>
        </ConwayControlUi>
    </div>
</div>

@code {
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _canvasContext;
    private BECanvasComponent _bufferCanvasReference;
    private Canvas2DContext _bufferCanvasContext;
    private BECanvasComponent _gridCanvasReference;
    private Canvas2DContext _gridCanvasContext;
    private BECanvasComponent _cellCanvasReference;
    private Canvas2DContext _cellCanvasContext;
    private GameRenderer _gameRenderer;

    private DotNetObjectReference<Index> _objectReference;
    private GameBoard _gameBoard = null;
    private System.Threading.Timer _gameTimer = null;

    private bool _isGameRunning = false;
    public bool IsGameRunning => _isGameRunning;
    private bool _showUI = false;

    public int Rows { get; set; } = 128;
    public int Columns { get; set; } = 128;

    private long canvasSize = 768; // Default value
    private long offscreenCanvasSize = 768;
    private int CanvasWidth => (int)canvasSize;
    private int CanvasHeight => (int)canvasSize;
    private int CellWidth => CanvasWidth / Columns;
    private int CellHeight => CanvasHeight / Rows;
    private double ZoomLevel { get; set; } = 1.0;
    private double PanX { get; set; } = 0.0;
    private double PanY { get; set; } = 0.0;
    private bool isDragging = false;
    private double initialMouseX;
    private double initialMouseY;

    private string _deadCellColor = "#424242";
    public string DeadCellColor
    {
        get => _deadCellColor;
        set
        {
            if (_deadCellColor != value)
            {
                _deadCellColor = value;
            }
        }
    }

    private string _aliveCellColor = "#1a237e";
    public string AliveCellColor
    {
        get => _aliveCellColor;
        set
        {
            if (_aliveCellColor != value)
            {
                _aliveCellColor = value;
                Task.Run(() => _gameRenderer.OnAliveCellColorChangedAsync(_aliveCellColor, CellWidth, CellHeight));
            }
        }
    }

    private string _gridLineColor = "#bdbdbd";
    public string GridLineColor
    {
        get => _gridLineColor;
        set
        {
            if (_gridLineColor != value)
            {
                _gridLineColor = value;
                Task.Run(() => _gameRenderer.DrawGridLines(CanvasWidth, CanvasHeight, CellWidth, CellHeight, _gridLineColor));
            }
        }
    }

    private bool _showGridLines { get; set; } = false;

    private DateTime _lastFrameTime;
    private const double DesiredFrameTime = 1.0 / 60.0;

    // A timestamp to keep track of the last game state update
    private DateTime _lastGameStateUpdateTime;

    // The update interval in milliseconds (initially 500ms for 2 generations per second)
    private int _gameUpdateInterval = 500;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _gameBoard = new GameBoard(Rows, Columns);
                _objectReference = DotNetObjectReference.Create(this);

                // Initialize all canvases and contexts
                _canvasContext = await _canvasReference.CreateCanvas2DAsync();
                _bufferCanvasContext = await _bufferCanvasReference.CreateCanvas2DAsync();
                _gridCanvasContext = await _gridCanvasReference.CreateCanvas2DAsync();
                _cellCanvasContext = await _cellCanvasReference.CreateCanvas2DAsync();

                _gameRenderer = new GameRenderer(_gameBoard,
                                 _canvasContext, _canvasReference,
                                 _bufferCanvasContext, _bufferCanvasReference,
                                 _gridCanvasContext, _gridCanvasReference,
                                 _cellCanvasContext, _cellCanvasReference);

                var viewportWidth = await JSRuntime.InvokeAsync<double>("getInnerWidth");
                if (viewportWidth <= 768)
                {
                    canvasSize = (long)Math.Floor(viewportWidth);
                    StateHasChanged();  // Request re-render with the updated size
                }
                // Add window resize listener
                await JSRuntime.InvokeVoidAsync("registerResizeEvent", _objectReference);

                // Add main canvas click listener
                await JSRuntime.InvokeVoidAsync("addMainCanvasClickListener", _objectReference);

                // Add main canvas hover and touch listener
                await JSRuntime.InvokeVoidAsync("addIndexCanvasInteractionListener", _objectReference);

                // Draw the initial grid lines on the grid canvas
                await _gameRenderer.DrawGridLines(CanvasWidth, CanvasHeight, CellWidth, CellHeight, _gridLineColor);

                // Start the continuous rendering loop
                await JSRuntime.InvokeVoidAsync("requestAnimationLoop", _objectReference);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during after first render: {ex.Message}");
            }
        }
    }

    // This method will be called continuously by our game loop
    [JSInvokable]
    public async Task Render()
    {
        try
        {
            if (_gameBoard == null) return;
            var currentTime = DateTime.UtcNow;
            var timeSinceLastFrame = (currentTime - _lastFrameTime).TotalSeconds;
            if (timeSinceLastFrame < DesiredFrameTime) return;

            // Update individual canvas elements
            await _gameRenderer.UpdateCellCanvas(_aliveCellColor, CellWidth, CellHeight);

            // Draw to the buffer canvas
            await _gameRenderer.DrawToBufferCanvas(_deadCellColor, (int)offscreenCanvasSize, _showGridLines);

            // Composite the buffer canvas onto the main canvas
            await _gameRenderer.CompositeCanvases(PanX, PanY, ZoomLevel, CanvasWidth, CanvasHeight, (int)offscreenCanvasSize, _gridLineColor);

            _lastFrameTime = currentTime;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during render method: {ex.Message}");
        }
    }

    public void StartGame()
    {

        if (_isGameRunning)
        {
            return;
        }

        // Dispose of the existing timer, if there's one
        if (_gameTimer != null)
        {
            _gameTimer.Dispose();
        }

        _gameTimer = new System.Threading.Timer(state =>
        {
            _gameBoard.GenerateNextState(); // Directly generate the next game state
        }, null, 0, _gameUpdateInterval);  // Adjust the interval as needed

        _isGameRunning = true;
    }

    public void PauseGame()
    {
        if (!_isGameRunning) return;

        _gameTimer?.Dispose();
        _gameTimer = null;

        _isGameRunning = false;
    }

    public string SaveGameState()
    {
        string gameState = SaveService.Save(_gameBoard);
        return gameState;
    }

    public void LoadGameState(string newState)
    {
        _gameBoard = SaveService.Load(newState, Rows, Columns);
    }

    [JSInvokable]
    public async Task HandleCanvasInteraction()
    {
        try
        {
            _showUI = true;
            StateHasChanged();  // Notify Blazor to re-render the component
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during HandleCanvasInteraction: {ex.Message}");
        }
    }

    private void HandleWheel(WheelEventArgs args)
    {
        double previousZoomLevel = ZoomLevel;
        ZoomLevel -= args.DeltaY * 0.001;
        ZoomLevel = Math.Clamp(ZoomLevel, 1.0, 5.0);

        // Calculate the position of the cursor relative to the viewport
        double cursorXRelativeToViewport = args.ClientX - PanX;
        double cursorYRelativeToViewport = args.ClientY - PanY;

        // Calculate the difference between the cursor's position and the center of the viewport
        double deltaX = cursorXRelativeToViewport - (canvasSize / 2.0);
        double deltaY = cursorYRelativeToViewport - (canvasSize / 2.0);

        // Adjust the pan values based on the zoom level change and the calculated differences
        PanX += deltaX * (ZoomLevel - previousZoomLevel) / ZoomLevel;
        PanY += deltaY * (ZoomLevel - previousZoomLevel) / ZoomLevel;

        // Calculate the boundaries based on the zoom level and canvas size
        double maxX = (offscreenCanvasSize - (canvasSize / ZoomLevel));
        double maxY = (offscreenCanvasSize - (canvasSize / ZoomLevel));

        // Clamp the pan values
        PanX = Math.Clamp(PanX, 0, maxX);
        PanY = Math.Clamp(PanY, 0, maxY);

        StateHasChanged();
    }

    private void HandleMouseDown(MouseEventArgs args)
    {
        if (args.Button == 2) // Right Mouse Button
        {
            isDragging = true;
            initialMouseX = args.ClientX;
            initialMouseY = args.ClientY;
        }
    }

    private void HandleMouseMove(MouseEventArgs args)
    {
        if (isDragging)
        {
            double deltaX = args.ClientX - initialMouseX;
            double deltaY = args.ClientY - initialMouseY;

            // Invert the movement
            PanX -= deltaX / ZoomLevel;
            PanY -= deltaY / ZoomLevel;

            // Calculate the boundaries based on the zoom level and canvas size
            double maxX = (offscreenCanvasSize - (canvasSize / ZoomLevel));
            double maxY = (offscreenCanvasSize - (canvasSize / ZoomLevel));

            // Clamp the pan values
            PanX = Math.Clamp(PanX, 0, maxX);
            PanY = Math.Clamp(PanY, 0, maxY);

            // Update the initial position for the next move event
            initialMouseX = args.ClientX;
            initialMouseY = args.ClientY;

            StateHasChanged(); // Trigger a re-render
        }
    }

    private void HandleMouseUp(MouseEventArgs args)
    {
        isDragging = false;
    }

    [JSInvokable]
    public void CanvasClick(double x, double y, int button)
    {
        if (IsGameRunning || isDragging || button != 0) return;  // Don't toggle if the game is running or user is dragging

        // Adjust for pan and zoom
        double adjustedX = PanX + (x / canvasSize) * (canvasSize / ZoomLevel);
        double adjustedY = PanY + (y / canvasSize) * (canvasSize / ZoomLevel);

        // Identify the cell
        int col = (int)Math.Floor(adjustedX / CellWidth);
        int row = (int)Math.Floor(adjustedY / CellHeight);

        if (row >= 0 && row < Rows && col >= 0 && col < Columns)
        {
            _gameBoard.ToggleCellState(row, col);
        }
    }

    private async Task ToggleUIVisibility(bool newState)
    {
        _showUI = newState;
        StateHasChanged();
    }

    private void HandleGameToggle(bool newState)
    {
        if (_isGameRunning)
        {
            PauseGame();
        }
        else
        {
            StartGame();
        }

        _isGameRunning = newState;

        StateHasChanged();  // Request a re-render
    }

    private void HandleGridToggle(bool newState)
    {
        _showGridLines = newState;
        StateHasChanged();
    }

    private void HandlePreviousState()
    {
        if (!IsGameRunning && _gameBoard.CanUndo())
        {
            _gameBoard.UndoLastState();
        }
    }

    private void HandleNextState()
    {
        if (!_isGameRunning)
        {
            _gameBoard.GenerateNextState();
        }
    }

    private void HandleReset()
    {
        _gameBoard.ResetGame();
    }

    private void HandleRandomize()
    {
        _gameBoard.RandomizeBoard();
    }

    [JSInvokable]
    private async Task<bool> HandleExportState(bool dummy)
    {
        try
        {
            var base64 = SaveGameState();
            if (string.IsNullOrEmpty(base64))
            {
                Console.WriteLine("Failed to get save state from _gameBoard");
                return false;
            }
            else
            {
                var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", base64);
                if (success)
                {
                    Console.WriteLine("Save state coppied to clipboard");
                }
                return success;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to export game state. Message: {ex}");
            return false;
        }
    }

    [JSInvokable]
    private async Task<bool> HandleImportState(bool dummy)
    {
        try
        {
            var base64 = await JSRuntime.InvokeAsync<string>("readFromClipboard");
            if (string.IsNullOrEmpty(base64))
            {
                Console.WriteLine("Failed to retrieve content from clipboard");
                return false;
            }
            else
            {
                LoadGameState(base64);
                Console.WriteLine("Gamestate loaded from clipboard");
                return true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to export game state. Message: {ex}");
            return false;
        }
    }

    [JSInvokable]
    public async Task OnWindowResize()
    {
        try
        {
            // Fetch the device's viewport width
            var viewportWidth = await JSRuntime.InvokeAsync<double>("getInnerWidth");

            // Set canvas size based on viewport width
            if (viewportWidth <= 768) // Mobile devices
            {
                canvasSize = (long)viewportWidth;
            }
            else // Larger desktop screens
            {
                canvasSize = 768; // Max size for the canvas
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during OnWindowResize: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _gameTimer?.Dispose();
        _objectReference?.Dispose();
    }
}
