@page "/"
@layout Layout
@inject IJSRuntime JSRuntime
@using ConwayClient.Models;
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@using Blazor.Extensions;

<div class="game-container blue-grey darken-1" style="width: 100%; max-width: 100%;">
    <div class="header white-text">
        <span class="title">Game Board</span>
    </div>
    <div style="background-color: black; width: @canvasSize; height: @canvasSize;">
        <ConwayControlUi CanvasSize="@CanvasWidth" ShowUI="@_showUI" OnHideRequest="HideUIRequest">
            <BECanvas Width="@canvasSize" Height="@canvasSize" @ref="_canvasReference"></BECanvas>
            <div style="display: none">
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_bufferCanvasReference"></BECanvas>
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_gridCanvasReference"></BECanvas>
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_cellCanvasReference"></BECanvas>
            </div>
        </ConwayControlUi>
    </div>
</div>

@code {
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _canvasContext;
    private BECanvasComponent _bufferCanvasReference;
    private Canvas2DContext _bufferCanvasContext;
    private BECanvasComponent _gridCanvasReference;
    private Canvas2DContext _gridCanvasContext;
    private BECanvasComponent _cellCanvasReference;
    private Canvas2DContext _cellCanvasContext;

    private DotNetObjectReference<Index> _objectReference;
    private GameBoard _gameBoard;

    private bool _isGameRunning = false;
    public bool IsGameRunning => _isGameRunning;
    private bool _showUI = false;

    public int Rows { get; set; } = 128;
    public int Columns { get; set; } = 128;

    private long canvasSize = 768; // Default value
    private long offscreenCanvasSize = 768;
    private int CanvasWidth => (int)canvasSize;
    private int CanvasHeight => (int)canvasSize;
    private int CellWidth => CanvasWidth / Columns;
    private int CellHeight => CanvasHeight / Rows;

    private string gameState = string.Empty;
    private bool ShowGridLines { get; set; } = true;

    private DateTime _lastFrameTime;
    private const double DesiredFrameTime = 1.0 / 60.0;

    // A timestamp to keep track of the last game state update
    private DateTime _lastGameStateUpdateTime;

    // The update interval in milliseconds (initially 500ms for 2 generations per second)
    private int _gameUpdateInterval = 500;

    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _objectReference = DotNetObjectReference.Create(this);

                // Initialize all canvases and contexts
                _canvasContext = await _canvasReference.CreateCanvas2DAsync();
                _bufferCanvasContext = await _bufferCanvasReference.CreateCanvas2DAsync();
                _gridCanvasContext = await _gridCanvasReference.CreateCanvas2DAsync();
                _cellCanvasContext = await _cellCanvasReference.CreateCanvas2DAsync();

                var viewportWidth = await JSRuntime.InvokeAsync<double>("getInnerWidth");
                if (viewportWidth <= 768)
                {
                    canvasSize = (long)Math.Floor(viewportWidth);
                    Console.WriteLine($"Setting Canvas Size to: {canvasSize.ToString()}");
                    StateHasChanged();  // Request re-render with the updated size
                }
                // Add window resize listener
                await JSRuntime.InvokeVoidAsync("registerResizeEvent", _objectReference);

                // Add main canvas click listener
                await JSRuntime.InvokeVoidAsync("addMainCanvasClickListener", _objectReference);

                // Add main canvas hover and touch listener
                await JSRuntime.InvokeVoidAsync("addCanvasInteractionListener", _objectReference);

                // Draw the initial grid lines on the grid canvas
                //await DrawGridLines(_gridCanvasContext, CanvasWidth, CanvasHeight, CellWidth, CellHeight);

                // Start the continuous rendering loop
                await JSRuntime.InvokeVoidAsync("requestAnimationLoop", _objectReference);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during after first render: {ex.Message}");
            }
        }
    }

    private async Task DrawGridLines(Canvas2DContext context, int canvasWidth, int canvasHeight, int cellWidth, int cellHeight)
    {
        await context.BeginBatchAsync();
        await context.SetStrokeStyleAsync("#bdbdbd");

        // Drawing horizontal lines
        for (int y = 0; y <= canvasHeight; y += cellHeight)
        {
            await context.BeginPathAsync();
            await context.MoveToAsync(0, y);
            await context.LineToAsync(canvasWidth, y);
            await context.StrokeAsync();
        }

        // Drawing vertical lines
        for (int x = 0; x <= canvasWidth; x += cellWidth)
        {
            await context.BeginPathAsync();
            await context.MoveToAsync(x, 0);
            await context.LineToAsync(x, canvasHeight);
            await context.StrokeAsync();
        }

        await context.EndBatchAsync();
    }

    // This method will be called continuously by our game loop
    [JSInvokable]
    public async Task Render()
    {
        try
        {
            // Update individual canvas elements
            await Update();

            // Draw to the buffer canvas
            await DrawToBufferCanvas();

            // Composite the buffer canvas onto the main canvas
            await CompositeCanvases();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during render method: {ex.Message}");
        }
    }

    private async Task Update()
    {
        try
        {
            await UpdateCellCanvas();
            await UpdateGridCanvas();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during Update method: {ex.Message}");
        }
    }

    private async Task UpdateCellCanvas()
    {
        try
        {
            await _cellCanvasContext.SetFontAsync("20px sans-serif");
            await _cellCanvasContext.SetFillStyleAsync("blue");
            await _cellCanvasContext.FillTextAsync("Cell Canvas", 50, 50);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during UpdateCellCanvas method: {ex.Message}");
        }
    }

    private async Task UpdateGridCanvas()
    {
        try
        {
            await _gridCanvasContext.SetFontAsync("20px sans-serif");
            await _gridCanvasContext.SetFillStyleAsync("red");
            await _gridCanvasContext.FillTextAsync("Grid Canvas", 50, 100);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during UpdateGridCanvas method: {ex.Message}");
        }
    }

    private async Task DrawToBufferCanvas()
    {
        try
        {
            // Fill buffer with dead cell color
            await _bufferCanvasContext.SetFillStyleAsync("#424242");
            await _bufferCanvasContext.FillRectAsync(0, 0, (int)offscreenCanvasSize, (int)offscreenCanvasSize);

            // Overlay live cells from cellCanvasContext onto bufferCanvasContext
            await _bufferCanvasContext.DrawImageAsync(_cellCanvasReference.CanvasReference, 0, 0);

            // Overlay grid lines if enabled
            if (ShowGridLines)
                await _bufferCanvasContext.DrawImageAsync(_gridCanvasReference.CanvasReference, 0, 0);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during DrawToBufferCanvas method: {ex.Message}");
        }
    }

    private async Task CompositeCanvases()
    {
        try
        {
            double scaleFactor = (double)canvasSize / (int)offscreenCanvasSize;
            Console.WriteLine($"Scale Factor: {scaleFactor}");
            await _canvasContext.ClearRectAsync(0, 0, canvasSize, canvasSize);
            await _canvasContext.DrawImageAsync(
                _bufferCanvasReference.CanvasReference,
                0, 0, (int)offscreenCanvasSize, (int)offscreenCanvasSize,
                0, 0, canvasSize, canvasSize
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error drawing image: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task HandleCanvasInteraction()
    {
        try
        {
            Console.WriteLine("Showing UI from Index");
            if (!_showUI) await ToggleUIVisibility();
            _showUI = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during HandleCanvasInteraction: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task HideUIRequest()
    {
        try
        {
            if (_showUI) await ToggleUIVisibility();
            _showUI = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during HideUIRequest: {ex.Message}");
        }
    }

    [JSInvokable]
    private async Task ToggleUIVisibility()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("toggleUIVisibility", "conwayUIContainer");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during ToggleUIVisibility: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnWindowResize()
    {
        try
        {
            Console.WriteLine("Window Resized");
            // Fetch the device's viewport width
            var viewportWidth = await JSRuntime.InvokeAsync<double>("getInnerWidth");

            // Set canvas size based on viewport width
            if (viewportWidth <= 768) // Mobile devices
            {
                canvasSize = (long)viewportWidth;
            }
            else // Larger desktop screens
            {
                canvasSize = 768; // Max size for the canvas
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during OnWindowResize: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }
}
