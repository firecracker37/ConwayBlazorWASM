@page "/"
@layout Layout
@inject IJSRuntime JSRuntime
@inject ISaveService SaveService
@using System.Threading
@using ConwayClient.Models
@using ConwayClient.Services
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@using Blazor.Extensions

<div class="game-container blue-grey darken-1" style="width: 100%; max-width: 100%;">
    <div class="header white-text">
        <span class="title">Game Board</span>
    </div>
    <div style="background-color: black; width: @canvasSize; height: @canvasSize;">
        <ConwayControlUi CanvasSize="@CanvasWidth"
                         ShowUI="@_showUI"
                         OnUIVisibilityChanged="ToggleUIVisibility"
                         IsGameRunning="@_isGameRunning"
                         ShowGridLines="@_showGridLines"
                         ToggleGameState="HandleGameToggle"
                         ToggleGridLines="HandleGridToggle"
                         OnPreviousState="HandlePreviousState"
                         OnNextState="HandleNextState"
                         OnReset="HandleReset"
                         OnRandomize="HandleRandomize"
                         OnExportState="HandleExportState"
                         OnImportState="HandleImportState"
                         @bind-DeadCellColor="@DeadCellColor" 
                         @bind-AliveCellColor="@AliveCellColor"
                         @bind-GridLineColor="@GridLineColor">
            <BECanvas Width="@canvasSize" Height="@canvasSize" @ref="_canvasReference"></BECanvas>
            <div style="display: none">
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_bufferCanvasReference"></BECanvas>
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_gridCanvasReference"></BECanvas>
                <BECanvas Width="@offscreenCanvasSize" Height="@offscreenCanvasSize" @ref="_cellCanvasReference"></BECanvas>
            </div>
        </ConwayControlUi>
    </div>
</div>

@code {
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _canvasContext;
    private BECanvasComponent _bufferCanvasReference;
    private Canvas2DContext _bufferCanvasContext;
    private BECanvasComponent _gridCanvasReference;
    private Canvas2DContext _gridCanvasContext;
    private BECanvasComponent _cellCanvasReference;
    private Canvas2DContext _cellCanvasContext;

    private DotNetObjectReference<Index> _objectReference;
    private GameBoard _gameBoard = null;
    private System.Threading.Timer _gameTimer = null;

    private bool _isGameRunning = false;
    public bool IsGameRunning => _isGameRunning;
    private bool _showUI = false;

    public int Rows { get; set; } = 128;
    public int Columns { get; set; } = 128;

    private long canvasSize = 768; // Default value
    private long offscreenCanvasSize = 768;
    private int CanvasWidth => (int)canvasSize;
    private int CanvasHeight => (int)canvasSize;
    private int CellWidth => CanvasWidth / Columns;
    private int CellHeight => CanvasHeight / Rows;

    private string _deadCellColor = "#424242";
    public string DeadCellColor
    {
        get => _deadCellColor;
        set
        {
            if (_deadCellColor != value)
            {
                _deadCellColor = value;
                OnDeadCellColorChanged(); // Call a method when the value changes
            }
        }
    }

    private string _aliveCellColor = "#1a237e";
    public string AliveCellColor
    {
        get => _aliveCellColor;
        set
        {
            if (_aliveCellColor != value)
            {
                _aliveCellColor = value;
                Task.Run(() => UpdateAliveCellsColor()); // Update the color of alive cells on the canvas
            }
        }
    }

    private string _gridLineColor = "#bdbdbd";
    public string GridLineColor
    {
        get => _gridLineColor;
        set
        {
            if (_gridLineColor != value)
            {
                _gridLineColor = value;
                Task.Run(() => OnGridLineColorChangedAsync()); // Call a method when the value changes
            }
        }
    }


    private bool _showGridLines { get; set; } = false;

    private DateTime _lastFrameTime;
    private const double DesiredFrameTime = 1.0 / 60.0;

    // A timestamp to keep track of the last game state update
    private DateTime _lastGameStateUpdateTime;

    // The update interval in milliseconds (initially 500ms for 2 generations per second)
    private int _gameUpdateInterval = 500;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _gameBoard = new GameBoard(Rows, Columns);
                _objectReference = DotNetObjectReference.Create(this);

                // Initialize all canvases and contexts
                _canvasContext = await _canvasReference.CreateCanvas2DAsync();
                _bufferCanvasContext = await _bufferCanvasReference.CreateCanvas2DAsync();
                _gridCanvasContext = await _gridCanvasReference.CreateCanvas2DAsync();
                _cellCanvasContext = await _cellCanvasReference.CreateCanvas2DAsync();

                var viewportWidth = await JSRuntime.InvokeAsync<double>("getInnerWidth");
                if (viewportWidth <= 768)
                {
                    canvasSize = (long)Math.Floor(viewportWidth);
                    StateHasChanged();  // Request re-render with the updated size
                }
                // Add window resize listener
                await JSRuntime.InvokeVoidAsync("registerResizeEvent", _objectReference);

                // Add main canvas click listener
                await JSRuntime.InvokeVoidAsync("addMainCanvasClickListener", _objectReference);

                // Add main canvas hover and touch listener
                await JSRuntime.InvokeVoidAsync("addIndexCanvasInteractionListener", _objectReference);

                // Draw the initial grid lines on the grid canvas
                await DrawGridLines(_gridCanvasContext, CanvasWidth, CanvasHeight, CellWidth, CellHeight);

                // Start the continuous rendering loop
                await JSRuntime.InvokeVoidAsync("requestAnimationLoop", _objectReference);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during after first render: {ex.Message}");
            }
        }
    }

    private async Task DrawGridLines(Canvas2DContext context, int canvasWidth, int canvasHeight, int cellWidth, int cellHeight)
    {
        await context.BeginBatchAsync();
        await context.SetStrokeStyleAsync(_gridLineColor);

        // Drawing horizontal lines
        for (int y = 0; y <= canvasHeight; y += cellHeight)
        {
            await context.BeginPathAsync();
            await context.MoveToAsync(0, y);
            await context.LineToAsync(canvasWidth, y);
            await context.StrokeAsync();
        }

        // Drawing vertical lines
        for (int x = 0; x <= canvasWidth; x += cellWidth)
        {
            await context.BeginPathAsync();
            await context.MoveToAsync(x, 0);
            await context.LineToAsync(x, canvasHeight);
            await context.StrokeAsync();
        }

        await context.EndBatchAsync();
    }

    // This method will be called continuously by our game loop
    [JSInvokable]
    public async Task Render()
    {
        try
        {
            if (_gameBoard == null) return;
            var currentTime = DateTime.UtcNow;
            var timeSinceLastFrame = (currentTime - _lastFrameTime).TotalSeconds;
            if (timeSinceLastFrame < DesiredFrameTime) return;

            // Update individual canvas elements
            await Update();

            // Draw to the buffer canvas
            await DrawToBufferCanvas();

            // Composite the buffer canvas onto the main canvas
            await CompositeCanvases();

            _lastFrameTime = currentTime;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during render method: {ex.Message}");
        }
    }

    private async Task Update()
    {
        try
        {
            await UpdateCellCanvas();
            // await UpdateGridCanvas();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during Update method: {ex.Message}");
        }
    }

    private async Task UpdateCellCanvas()
    {
        try
        {
            if (_gameBoard.StateUpdated)
            {
                // Draw only the updated cells on the buffer canvas
                await _cellCanvasContext.BeginBatchAsync();

                var bornCells = _gameBoard.GetBornCells();
                var deadCells = _gameBoard.GetDeadCells();

                // Draw all newly born cells
                await _cellCanvasContext.SetFillStyleAsync(_aliveCellColor); // Alive cell color
                foreach (var cell in bornCells)
                {
                    await _cellCanvasContext.FillRectAsync(cell.Col * CellWidth, cell.Row * CellHeight, CellWidth, CellHeight);
                }

                // Clear all newly dead cells
                foreach (var cell in deadCells)
                {
                    await _cellCanvasContext.ClearRectAsync(cell.Col * CellWidth, cell.Row * CellHeight, CellWidth, CellHeight);
                }

                await _cellCanvasContext.EndBatchAsync();
                _gameBoard.ResetStateUpdatedFlag();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during UpdateCellCanvas method: {ex.Message}");
        }
    }

    private async Task UpdateGridCanvas()
    {
        try
        {
            await DrawGridLines(_gridCanvasContext, CanvasWidth, CanvasHeight, CellWidth, CellHeight);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during UpdateGridCanvas method: {ex.Message}");
        }
    }

    private async Task DrawToBufferCanvas()
    {
        try
        {
            // Fill buffer with dead cell color
            await _bufferCanvasContext.SetFillStyleAsync(_deadCellColor);
            await _bufferCanvasContext.FillRectAsync(0, 0, (int)offscreenCanvasSize, (int)offscreenCanvasSize);

            // Overlay live cells from cellCanvasContext onto bufferCanvasContext
            await _bufferCanvasContext.DrawImageAsync(_cellCanvasReference.CanvasReference, 0, 0);

            // Overlay grid lines if enabled
            if (_showGridLines)
                await _bufferCanvasContext.DrawImageAsync(_gridCanvasReference.CanvasReference, 0, 0);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during DrawToBufferCanvas method: {ex.Message}");
        }
    }

    private async Task CompositeCanvases()
    {
        try
        {
            double scaleFactor = (double)canvasSize / (int)offscreenCanvasSize;
            await _canvasContext.ClearRectAsync(0, 0, canvasSize, canvasSize);
            await _canvasContext.DrawImageAsync(
                _bufferCanvasReference.CanvasReference,
                0, 0, (int)offscreenCanvasSize, (int)offscreenCanvasSize,
                0, 0, canvasSize, canvasSize
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error drawing image: {ex.Message}");
        }
    }

    public void StartGame()
    {

        if (_isGameRunning)
        {
            return;
        }

        // Dispose of the existing timer, if there's one
        if (_gameTimer != null)
        {
            _gameTimer.Dispose();
        }

        _gameTimer = new System.Threading.Timer(state =>
        {
            _gameBoard.GenerateNextState(); // Directly generate the next game state
        }, null, 0, _gameUpdateInterval);  // Adjust the interval as needed

        _isGameRunning = true;
    }

    public void PauseGame()
    {
        if (!_isGameRunning) return;

        _gameTimer?.Dispose();
        _gameTimer = null;

        _isGameRunning = false;
    }

    public string SaveGameState()
    {
        string gameState = SaveService.Save(_gameBoard);
        return gameState;
    }

    public void LoadGameState(string newState)
    {
        _gameBoard = SaveService.Load(newState, Rows, Columns);
    }

    [JSInvokable]
    public async Task HandleCanvasInteraction()
    {
        try
        {
            _showUI = true;
            StateHasChanged();  // Notify Blazor to re-render the component
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during HandleCanvasInteraction: {ex.Message}");
        }
    }

    [JSInvokable]
    public void CanvasClick(double x, double y)
    {
        if (IsGameRunning) return;

        int col = (int)x / CellWidth;
        int row = (int)y / CellHeight;

        if (row >= 0 && row < Rows && col >= 0 && col < Columns)
        {
            _gameBoard.ToggleCellState(row, col);
        }
    }

    private async Task ToggleUIVisibility(bool newState)
    {
        _showUI = newState;
        StateHasChanged();
    }

    private void HandleGameToggle(bool newState)
    {
        if (_isGameRunning)
        {
            PauseGame();
        }
        else
        {
            StartGame();
        }

        _isGameRunning = newState;

        StateHasChanged();  // Request a re-render
    }

    private void HandleGridToggle(bool newState)
    {
        _showGridLines = newState;
        StateHasChanged();
    }

    private void HandlePreviousState()
    {
        if (!IsGameRunning && _gameBoard.CanUndo())
        {
            _gameBoard.UndoLastState();
        }
    }

    private void HandleNextState()
    {
        if (!_isGameRunning)
        {
            _gameBoard.GenerateNextState();
        }
    }

    private void HandleReset()
    {
        _gameBoard.ResetGame();
    }

    private void HandleRandomize()
    {
        _gameBoard.RandomizeBoard();
    }

    [JSInvokable]
    private async Task<bool> HandleExportState(bool dummy)
    {
        try
        {
            var base64 = SaveGameState();
            if (string.IsNullOrEmpty(base64))
            {
                Console.WriteLine("Failed to get save state from _gameBoard");
                return false;
            }
            else
            {
                var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", base64);
                if (success)
                {
                    Console.WriteLine("Save state coppied to clipboard");
                }
                return success;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to export game state. Message: {ex}");
            return false;
        }
    }

    [JSInvokable]
    private async Task<bool> HandleImportState(bool dummy)
    {
        try
        {
            var base64 = await JSRuntime.InvokeAsync<string>("readFromClipboard");
            if (string.IsNullOrEmpty(base64))
            {
                Console.WriteLine("Failed to retrieve content from clipboard");
                return false;
            }
            else
            {
                LoadGameState(base64);
                Console.WriteLine("Gamestate loaded from clipboard");
                return true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to export game state. Message: {ex}");
            return false;
        }
    }

    private void OnDeadCellColorChanged()
    {
        // Add additional logic here if needed
    }

    private void OnAliveCellColorChanged()
    {
        // Add additional logic here if needed
    }

    private async Task OnGridLineColorChangedAsync()
    {
        await DrawGridLines(_gridCanvasContext, CanvasWidth, CanvasHeight, CellWidth, CellHeight);
    }

    private async Task UpdateAliveCellsColor()
    {
        try
        {
            var aliveCells = _gameBoard.GetAliveCells();

            // Begin drawing on the canvas
            await _cellCanvasContext.BeginBatchAsync();

            // Set the new fill style
            await _cellCanvasContext.SetFillStyleAsync(_aliveCellColor); // Alive cell color

            // Draw over all alive cells with the new color
            foreach (var cell in aliveCells)
            {
                await _cellCanvasContext.FillRectAsync(cell.Col * CellWidth, cell.Row * CellHeight, CellWidth, CellHeight);
            }

            // End drawing on the canvas
            await _cellCanvasContext.EndBatchAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during UpdateAliveCellsColor method: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnWindowResize()
    {
        try
        {
            // Fetch the device's viewport width
            var viewportWidth = await JSRuntime.InvokeAsync<double>("getInnerWidth");

            // Set canvas size based on viewport width
            if (viewportWidth <= 768) // Mobile devices
            {
                canvasSize = (long)viewportWidth;
            }
            else // Larger desktop screens
            {
                canvasSize = 768; // Max size for the canvas
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during OnWindowResize: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _gameTimer?.Dispose();
        _objectReference?.Dispose();
    }
}
