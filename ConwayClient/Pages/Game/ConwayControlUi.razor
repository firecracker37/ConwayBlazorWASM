@inject IJSRuntime JSRuntime

<div class="ui-container" style="width: @CanvasSize; height: @CanvasSize;" @onmouseleave="StartHideUITimer">
    @ChildContent

    <div class="ui-elements @(ShowUI ? "show" : "")" id="conwayUIContainer">
        <!-- Example UI element positioned over the canvas -->
        <button class="button-top-center control-button @(IsGameRunning ? "pause-button" : "play-button")" @onclick="OnPlayButtonClick">
            <i class="material-icons">@(IsGameRunning ? "pause" : "play_arrow")</i>
        </button>

        <ul class="ui-menu-buttons @(IsGameRunning ? "ui-menu-hide" : "ui-menu-show")">
            <li><button class="menu-button"><i class="material-icons" @onclick="OnGridButtonClick">@(ShowGridLines ? "grid_off" : "grid_on")</i></button></li>
            <li><button class="menu-button"><i class="material-icons" @onclick="OpenSettingsPanel">settings</i></button></li>
            <li><button class="menu-button"><i class="material-icons" @onclick="OnExportButtonClick">cloud_download</i></button></li>
            <li><button class="menu-button"><i class="material-icons" @onclick="OnImportButtonClick">cloud_upload</i></button></li>
        </ul>

        <button class="button-left-center control-button history-button" disabled="@IsGameRunning" @onclick="OnPreviousStateButtonClick"><i class="material-icons">skip_previous</i></button>
        <button class="button-right-center control-button history-button" disabled="@IsGameRunning" @onclick="OnNextStateButtonClick"><i class="material-icons">skip_next</i></button>
        <button class="button-bottom-left control-button reset-button" disabled="@IsGameRunning" @onclick="OnResetButtonClick"><i class="material-icons">settings_backup_restore</i></button>
        <button class="button-bottom-right control-button randomize-button" disabled="@IsGameRunning" @onclick="OnRandomizeButtonClick"><i class="material-icons">shuffle</i></button>

        <div class="settings-panel @(_showSettingsPanel ? "settings-panel-visable" : "settings-panel-hidden")" id="settingsPanel">
            <button class="settings-close-button" @onclick="CloseSettingsPanel"><i class="material-icons">close</i></button>
            <!-- Settings options will be added here -->
        </div>

        <div class="message-display-panel @(_showMessageDisplayPanel ? "message-display-panel-visable" : "message-display-panel-hidden") @_messageDisplayLevel">
            <p>@_messageDisplayText</p>
        </div>
    </div>

</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public int CanvasSize { get; set; }
    [Parameter] public bool ShowUI { get; set; }
    [Parameter] public EventCallback<bool> OnUIVisibilityChanged { get; set; }
    [Parameter] public bool IsGameRunning { get; set; }
    [Parameter] public bool ShowGridLines { get; set; }
    [Parameter] public EventCallback<bool> ToggleGameState { get; set; }
    [Parameter] public EventCallback<bool> ToggleGridLines { get; set; }
    [Parameter] public EventCallback OnPreviousState { get; set; }
    [Parameter] public EventCallback OnNextState { get; set; }
    [Parameter] public EventCallback OnReset { get; set; }
    [Parameter] public EventCallback OnRandomize { get; set; }
    [Parameter] public Func<bool, Task<bool>> OnExportState { get; set; }
    [Parameter] public Func<bool, Task<bool>> OnImportState { get; set; }

    private bool _showSettingsPanel = false;
    private bool _showMessageDisplayPanel = false;
    private Timer _hideMessageDisplayPanel;
    private string _messageDisplayText;
    private string _messageDisplayLevel;
    private Timer _hideUITimer;
    private DotNetObjectReference<ConwayControlUi> _conwayControlUiReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _conwayControlUiReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addConwayControlUiListener", _conwayControlUiReference);
        }
    }

    private void OnPlayButtonClick()
    {
        ToggleGameState.InvokeAsync(!IsGameRunning);  // Toggle the game state
    }

    private void OnGridButtonClick()
    {
        ToggleGridLines.InvokeAsync(!ShowGridLines); // Toggle grid visibility
    }

    private async Task OnExportButtonClick()
    {
        var success = await OnExportState.Invoke(true);
        if (success)
        {
            DisplayMessageSuccess("State successfully exported to clipboard.");
        }
        else
        {
            DisplayMessageFail("Failed to export game state.");
        }
    }

    private async Task OnImportButtonClick()
    {
        var success = await OnImportState.Invoke(true);
        if (success)
        {
            DisplayMessageSuccess("State successfully imported from clipboard.");
        }
        else
        {
            DisplayMessageFail("Failed to import game state.");
        }
    }


    private async Task OnPreviousStateButtonClick()
    {
        await OnPreviousState.InvokeAsync(null);
    }

    private async Task OnNextStateButtonClick()
    {
        await OnNextState.InvokeAsync(null);
    }

    private async Task OnResetButtonClick()
    {
        await OnReset.InvokeAsync(null);
    }

    private async Task OnRandomizeButtonClick()
    {
        await OnRandomize.InvokeAsync(null);
    }

    private void OpenSettingsPanel()
    {
        _showSettingsPanel = true;
        StateHasChanged();  // Request a re-render to apply the changes
    }

    private void CloseSettingsPanel()
    {
        _showSettingsPanel = false;
        StateHasChanged();  // Request a re-render to apply the changes
    }
    private void DisplayMessageSuccess(string message)
    {
        DisplayMessage(message, "message-success");
    }

    private void DisplayMessageFail(string message)
    {
        DisplayMessage(message, "message-fail");
    }

    private void DisplayMessage(string message, string level)
    {
        _messageDisplayText = message;
        _messageDisplayLevel = level;
        _showMessageDisplayPanel = true;
        StartHideMessageTimer();
    }

    private void StartHideMessageTimer()
    {
        // If there's an existing timer, dispose of it first.
        _hideMessageDisplayPanel?.Dispose();

        // Start a new timer that will elapse after three seconds.
        _hideMessageDisplayPanel = new Timer(HideMessageAfterDelay, null, 3000, Timeout.Infinite);
    }

    private void HideMessageAfterDelay(object state)
    {
        InvokeAsync(() =>
        {
            _showMessageDisplayPanel = false;
            StateHasChanged();
        });
    }

    [JSInvokable]
    public void StartHideUITimer()
    {
        // If there's an existing timer, dispose of it first.
        _hideUITimer?.Dispose();

        // Start a new timer that will elapse after one second.
        _hideUITimer = new Timer(HideUIAfterDelay, null, 1000, Timeout.Infinite);
    }

    private void HideUIAfterDelay(object state)
    {
        if (_showSettingsPanel || _showMessageDisplayPanel) return;
        InvokeAsync(() =>
        {
            ShowUI = false;
            OnUIVisibilityChanged.InvokeAsync(ShowUI); // Notify the parent component
        });
    }

    // Call this method if any interaction happens within the one-second timer.
    private void CancelHideUITimer()
    {
        _hideUITimer?.Dispose();
        _hideUITimer = null;
    }

    // Don't forget to dispose of the timer when the component is disposed to avoid memory leaks.
    public void Dispose()
    {
        _conwayControlUiReference?.Dispose();
        _hideUITimer?.Dispose();
        _hideMessageDisplayPanel.Dispose();
    }
}